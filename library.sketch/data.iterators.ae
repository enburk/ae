let: self = ::meta::self;
let: same = ::meta::same;

          in
           ^
left < iterator > right
           v
          out


type: reference (type: x)
{
    property: ! → x;
    property: ! ← x;
}
type: pointer (type: x) implements: reference(x)
{
    address address;
    property: ! → x = value.of(x)::at(address);
    property: ! ← x = value.of(x)::at(address) ← !;
}
type: random.access.iterator (type: x) extends: iterator(x)
{
    operator: +  (int n) → same;
    operator: -  (int n) → same;
    operator: += (int n) {self! ← self! + n}
    operator: -= (int n) {self! ← self! - n}
    operator: ++ {self! += 1}
    operator: -- {self! -= 1}
    operator: -  (same) → int;
    operator: <  (same) → boolean;
}


type: iterator (type: x)
{
    property: value → x;
    property: value ← x;
    operator: ++;
    operator: --;
}
type:  forward.iterator (type: x) extends: iterator(x) { delete: -=; }
type: backward.iterator (type: x) extends: iterator(x) { delete: +=; }

type: random.access.iterator (type: x) extends: iterator(x)
{
    operator: >> (int n = 1) → same:;
    operator: << (int n = 1) → same:;
    operator: -  (same:) → int;
    operator: <  (same:) → boolean;
}
type: random.access.iterator (type: x) extends: iterator(x) ;;, ordered
{
    operator: +  (integer n);
    operator: -  (integer n);
    operator: += (integer n){ self: ← self: + n }
    operator: -= (integer n){ self: ← self: - n }
    operator: ++ { self: += 1 }
    operator: -- { self: -= 1 }
    operator: -  (same:) → integer;
    operator: <  (same:) → boolean;
}
;;type: contiguous.iterator (type: x) extends: pointer(x), implements: random.access.iterator(x)
type: contiguous.iterator (type: x) implements: random.access.iterator(x)
{
    address address;
    property: value → x = value.of(x)::at(address);
    property: value ← x = value.of(x)::at(address) ← value;
    operator: < (same: i) = (address < i.address);
    operator: - (same: i) = (address - i.address) / size.of(x);
    operator: + (int n) = address + n × size.of(x);
    operator: - (int n) = address - n × size.of(x);
}
type:  forward.contiguous.iterator (type: x) extends: contiguous.iterator(x) { delete: -=; }
type: backward.contiguous.iterator (type: x) extends: contiguous.iterator(x) { delete: +=; }

;; type integer.iterator : random.access.iterator(x) =
;;
;;     integer value;
;;     operator: ++ = value++;
;;     operator: -- = value--;
;;     operator: += (integer n) = value += n;
;;     operator: -= (integer n) = value -= n;
;;     operator: -  (same i) = value - i.value;

;;     requires:
;;     invariant:

;; a := f;


