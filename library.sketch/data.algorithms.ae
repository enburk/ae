mutation: swap (a, b) { c := a; a ← b; b ← c }

;; extension.of.type: range (type: x)

type: range (type: x) extension:
{
    mutation: remove.if (predicate(x) match) =
    {
        i := begin;
        j := begin;
        while: j ≠ end do: {
            swap(i.value, j.value);
            not match(i.value)? i++;
            j++;
        }
        return: i;
    }
}

type: range (type: x) extension:
{
    function: remove.if (predicate(x) match) =
    {
        i := begin;
        j := begin;
        while: j ≠ end do: {
            swap(i!, j!);
            not match(i!)? i++;
            j++;
        }
        return: i;
    }
}

type:
range(x) extension: =
{
    function:
    remove.if (predicate(x) match) =
    {
        i := begin;
        j := begin;

        while: j ≠ end do: {
        swap(i.value, j.value);
        not match(i.value)? i++;
        j++; }

        return: i;
    }
}

mutation:
swap.if.not.in.order(i, j, in.order) =
    not in.order(i::value, j::value)?
            swap(i::value, j::value);


type: bidirectional.range (type: x) extension:
{
    mutation: bubble.sort (predicate(x,x) in.order = ≤) =
    {
        b := begin;
        e := end;
        while: b ≠ e do: {
            i := b;
            j := b; j++;
            while: j ≠ e do: {
                not in.order(
                i::value, j::value)? swap(
                i::value, j::value);
                i++;
                j++;
            }
            e--;
        }
    }
}

type random.access.range(x) extension =
{
    mutation rotate.by.reverse (middle: iterator) =
    {
        b := begin;
        m := middle;
        e := end;

        reverse(b, m);
        reverse(m, e);
        reverse(b, e);

        m = b + (e - m);

        return m;
    }

    mutation stable.partition (match: unary.predicate(x)) → iterator =
    {
        if size = 0 then return begin;
        if size = 1 then return begin + integer(match(begin.value));

        b := begin;
        m := b + size/2;
        e := end;

        return random.access.range
        (
            this[b, m)::stable.partition(match),
            this[m, e)::stable.partition(match)
        )
        ::rotate(m);
    }

    mutation gather (place: iterator, match: unary.predicate(x)) =
    {
        return random.access.range
        (
            this[begin, place)::stable_partition(negate(match)),
            this[place,   end)::stable_partition(match)
        )
    }
}












