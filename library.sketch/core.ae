contiguous.range (type x) : type
    function data →
    function size → int

operator (type x) [] → contiguous.range(x);

type boolean = {false, true}

boolean: type = {true, false};
integral: type = I or Z or Q or R or C;

x = something;
x = case1 ? do1:
x = case2 ? do2:
    otherwise;

pair (type 1st, type 2nd) = { 1st 1st; 2nd 2nd }

operator if (x) = (if x = true)
operator (x) ?  = (if x = true)

type integral

type integer.8
type integer.16
type integer.32
type integer.64

using
    type N = natural
    type Z = integer
    type Q = rational
    type R = real
    type C = complex

type complex extension

    function re → real
    function im → real

integer : rational =

    mutation += (integer) = …

operator (real) + (real) → real = …

operator (Z) + (Z) → Z = …
operator (R) + (R) → R = …

operator (x) = (x) = …


for x in {natural, integer, rational, real, complex}

    operator (x) + (x) = …
    operator (x) - (x) = …
    operator (x) × (x) = …
    operator (x) / (x) = …

function Z (N) = …
function Q (Z) = …
function R (Q) = …
function C (R) = …

operator (N) / (N) → Q
operator (Z) / (Z) → Q
operator (N) - (N) → Z

operator (N) mod (N) → N
operator (Z) mod (Z) → Z

operator (N) + (N) → N; operator (Z) + (Z) → Z;
operator (N) - (N) → Z; operator (Z) - (Z) → Z;
operator (N) × (N) → N; operator (Z) × (Z) → Z;
operator (N) : (N) → Q; operator (Z) : (Z) → Q;

operator (x) / (y) = (x) : (y)

operator (numeric x) / (numeric y) = x : y

operator -(N) → Z
operator -(Z) → Z
operator -(Q) → Q
operator -(R) → R
operator -(C) → C

axiom (Z a, b, c): a + (b + c) = (a + b) + c

axiom: N is semiring



operator (x) >>> (f) = f(x)
operator (f) <<< (x) = f(x)

operator (x) >>> (f) : f(x)
operator (f) <<< (x) : f(x)

operator (x):(y) = ratio(x, y)

operator a:a ::
operator x:y = ratio x y

;; operator if (x) then (y) else (z) ;; = x ? y : z
;; {
;;     if x
;;     then return y;
;;     else return z;
;; }

;; operator (f) if (x) else (g) = ;; python

;; operator if (x) then (y) elif (z) then (a) … else (b) =













