range(type x): type =

    iterator = forward.iterator(x);
    sentinel : type;

    function begin → iterator;
    function end   → sentinel;
    ;

type range(x) =

    type iterator = forward.iterator(x);
    type sentinel = {…}

    function begin → iterator = {…}
    function end   → sentinel = {…}

type random.access.range(x) : range(x) =

    type iterator = random.access.iterator;
    type sentinel = {…}

    function from (iterator i) → same = …
    function upto (iterator i) → same = …
    operator [iterator i, iterator j] = from(i).upto(j+1);
    operator [iterator i, iterator j) = from(i).upto(j);

    function from (integer n) = from(begin+n);
    function upto (integer n) = upto(begin+n);
    operator [integer b, integer e] = from(b).upto(e-b+1);
    operator [integer b, integer e) = from(b).upto(e-b);

    operator [integer i] = (begin+i)::value;
    operator (integer i) = (begin+i)::value;

type: contiguous.range(type: x) extends: random.access.range(x) =
{
    override: iterator = contiguous.iterator;
    override: sentinel = contiguous.iterator;

    override: iterator =  forward.contiguous.iterator;
    override: sentinel = backward.contiguous.iterator;

    iterator .begin;
    sentinel .end;

    override: begin = .begin;
    override: end   = .end;

    invariant: begin ≤ end;
    disable: iterator::--;
    disable: sentinel::++;

    function: size = end - begin;
    function: clip (iterator i) = min(max(begin,i),end);
    function: from (iterator i) = same(clip(i), end);
    override: upto (iterator i) = same(begin, clip(i));
}
type: integer.range extends: random.access.range(integer) ;; immutable?
{
    iterator = integer.iterator; iterator begin;
    sentinel = integer.iterator; sentinel end;

    constructor: [integer a, integer b] { assert: a≤b; begin ← a; end ← b; }
    constructor: [integer a, integer b) { assert: a<b; begin ← a; end ← b-1; }

    function size = end - begin;
    function clip (iterator i) = min(max(begin,i),end)
    function from (iterator i) = same(clip(i), end)
    function upto (iterator i) = same(begin, clip(i))
}

for: x in: 0… 100 do: ;
for: x in: a… b do: ;
for: x in: integer.range[0, 100) do: ;
for: x in: integer.range[100, 0] do: ; ;; backward.iterator ?
for: x in: integer.range[0, 100]::reverse() do: ;

for: y in: 0…size::y-1 do:
for: x in: 0…size::x-1 do:
    image(x,y) = red;

for: y in: integer.range[0, size::y) do:
for: x in: integer.range[0, size::x) do:
    image(x,y) = red;

type: image
{
    function: xs { for: x in: integer.range[0, size::x) yield: x }
    function: ys { for: y in: integer.range[0, size::y) yield: y }

    function: fill (color c) {
        for: y in: ys() do:
        for: x in: xs() do:
        image(x,y) = c; }

    void copy_from (frame f)
    {
        int w = min(size.x, f.size.x); if (w <= 0) return;
        int h = min(size.y, f.size.y); if (h <= 0) return;
        for (int y=0; y<h; y++)
        for (int x=0; x<w; x++) (*this)(x,y) = f(x,y);
        image->updates += xywh(offset.x, offset.y, w, h);
    }

}

type: address = integer[0, 2^word); ;; range?
type: size    = integer[0, 2^word);

text
{
    type: view extends: contiguous.range(byte)
    {
    }

    type: string
    {
        type: container = view or array(byte);
    }
}

type: type: extension =
{
    operator: … = range(same);
    operator: [] = random.access.range(same);
    operator: [same a, same b) = random.access.range(same)[a, b);
    operator: [same a, same b] = random.access.range(same)[a, b];
    operator: [integer a, integer b) = random.access.range(same)[a, b);
    operator: [integer a, integer b] = random.access.range(same)[a, b];
}

text
{
    type: view extends: [byte]
    type: view extends: byte[]
    {
    }
}

operator (x) … = range(x);
operator (x) [] = random.access.range(x);

type integer extension =

    operator [integer a, integer b) = integer.range[a, b);
    operator [integer a, integer b] = integer.range[a, b];

statement for each (x) in (type… r) do (f(x)) =

    i := r::begin
    while i ≠ r::end do
        using x = i::value
            f(x)


;; f, r - expressions, x - name
operator (f(x)) for each (x) in (r) =

    i := r::begin;
    while i ≠ r::end do
        using x = i::value
            yield f(x)


operator (f) while (x) = while x yield f
operator (f) until (x) = yield f; while x yield f








