ordered = totally.ordered.lexicographically;

type totally.ordered.lexicographically
{
	operator <=> (totally.ordered.lexicographically r) -> {less, equals, greater}
	{
		for member : meta::members
		{
			if (member < r.member) return less;
			if (member > r.member) return greater;
		}
		return equals;
	}
}

type place : ordered { int line, char }


;; move no throw:
;; auto undo = undos.back(); undos.pop_back();

;; property field:
;; window.size.x -= d;



;; instead of std::rotate(f, m, l) :
::swap([f, m), [m, l));
;; declarations/definitions:
swap (range a, range b) requires intersection(a, b) = nil
{ ... }
swap (range a, range b) requires contiguous([a.begin, b.end)) and a.end = b.begin
{ ... }

l := true
O := false

