;; Equals means equals
bool it.is.not.c = true;

;; Assignment operators:

it.isn't.c++;

type set = {1, 2, 3}
auto list = (1, 1.1, "1.1");
auto array = [1, 2, 3];

type set = {}
auto list = ();
auto array = [];

;; Операция "Конкатенация"

auto set ~= {1}
auto list ~= (1);
auto array ~= [1];

for int i = 1...array##
{
}

while true for pi = 3.13...3.15
{
}


entity
{
}

;; 

;; There are no such keywords as public, private and protected.
;; If Nature doesn't seems to support perfect encapsulation, why we would?
;; If something is not a part of everyday interface just tell that:

human
{
     abdomen
	 {
	      appendix { ... }
	 }
}

;; ==========
embeded dynamic array and tuples
reasonably effective on pool of stacks
RVO
recursion?

foo () -> char[] = { foo += 'a';  foo += 'b';  foo += 'c'; }
bar () -> char[] = { bar += 'd';  bar += 'e';  bar += 'f'; }
auto abc = foo();
auto def = bar();
abc += 'x';
def += 'y';

approximately equivalent to

std::stack stacks[2];
void foo (char[] & cc){ cc += 'a';  cc += 'b';  cc += 'c'; }
void bar (char[] & cc){ cc += 'd';  cc += 'e';  cc += 'f'; }
char[] abc = stacks[0].allocate();
char[] def = stacks[1].allocate();
foo(abc);
bar(def);
abc += 'x';
def += 'y';
;; ==========


