Sean Parent's switch buttons


https://www.youtube.com/watch?v=C2vgICfQawE
epic conway's game of life


https://www.dropbox.com/s/mhtvh64qjy5qoe0/quine.py?dl=0
https://www.youtube.com/watch?v=a-zEbokJAgY&list=PLrAXtmErZgOcl7mvyfkQTHFnOGZxWtN55&index=3&t=0s

# quine
s='s=%r;print(s%%s)';print(s%s)

# interactive intron
t='';s='t=input()or t;print(f"t={repr(t)};s={repr(s)};exec(s)#{t}")';exec(s)# 



https://www.a1k0n.net/2011/07/20/donut-math.html
Donut math: how donut.c works

             k;double sin()
         ,cos();main(){float A=
       0,B=0,i,j,z[1760];char b[
     1760];printf("\x1b[2J");for(;;
  ){memset(b,32,1760);memset(z,0,7040)
  ;for(j=0;6.28>j;j+=0.07)for(i=0;6.28
 >i;i+=0.02){float c=sin(i),d=cos(j),e=
 sin(A),f=sin(j),g=cos(A),h=d+2,D=1/(c*
 h*e+f*g+5),l=cos      (i),m=cos(B),n=s\
in(B),t=c*h*g-f*        e;int x=40+30*D*
(l*h*m-t*n),y=            12+15*D*(l*h*n
+t*m),o=x+80*y,          N=8*((f*e-c*d*g
 )*m-c*d*e-f*g-l        *d*n);if(22>y&&
 y>0&&x>0&&80>x&&D>z[o]){z[o]=D;;;b[o]=
 ".,-~:;=!*#$@"[N>0?N:0];}}/*#****!!-*/
  printf("\x1b[H");for(k=0;1761>k;k++)
   putchar(k%80?b[k]:10);A+=0.04;B+=
     0.02;}}/*****####*******!!=;:~
       ~::==!!!**********!!!==::-
         .,~~;;;========;;;:~-.
             ..,--------,*/
             
             
const float theta_spacing = 0.07;
const float phi_spacing   = 0.02;

const float R1 = 1;
const float R2 = 2;
const float K2 = 5;
// Calculate K1 based on screen size: the maximum x-distance occurs
// roughly at the edge of the torus, which is at x=R1+R2, z=0.  we
// want that to be displaced 3/8ths of the width of the screen, which
// is 3/4th of the way from the center to the side of the screen.
// screen_width*3/8 = K1*(R1+R2)/(K2+0)
// screen_width*K2*3/(8*(R1+R2)) = K1
const float K1 = screen_width*K2*3/(8*(R1+R2));

render_frame(float A, float B) {
  // precompute sines and cosines of A and B
  float cosA = cos(A), sinA = sin(A);
  float cosB = cos(B), sinB = sin(B);

  char output[0..screen_width, 0..screen_height] = ' ';
  float zbuffer[0..screen_width, 0..screen_height] = 0;

  // theta goes around the cross-sectional circle of a torus
  for (float theta=0; theta < 2*pi; theta += theta_spacing) {
    // precompute sines and cosines of theta
    float costheta = cos(theta), sintheta = sin(theta);

    // phi goes around the center of revolution of a torus
    for(float phi=0; phi < 2*pi; phi += phi_spacing) {
      // precompute sines and cosines of phi
      float cosphi = cos(phi), sinphi = sin(phi);
    
      // the x,y coordinate of the circle, before revolving (factored
      // out of the above equations)
      float circlex = R2 + R1*costheta;
      float circley = R1*sintheta;

      // final 3D (x,y,z) coordinate after rotations, directly from
      // our math above
      float x = circlex*(cosB*cosphi + sinA*sinB*sinphi)
        - circley*cosA*sinB; 
      float y = circlex*(sinB*cosphi - sinA*cosB*sinphi)
        + circley*cosA*cosB;
      float z = K2 + cosA*circlex*sinphi + circley*sinA;
      float ooz = 1/z;  // "one over z"
      
      // x and y projection.  note that y is negated here, because y
      // goes up in 3D space but down on 2D displays.
      int xp = (int) (screen_width/2 + K1*ooz*x);
      int yp = (int) (screen_height/2 - K1*ooz*y);
      
      // calculate luminance.  ugly, but correct.
      float L = cosphi*costheta*sinB - cosA*costheta*sinphi -
        sinA*sintheta + cosB*(cosA*sintheta - costheta*sinA*sinphi);
      // L ranges from -sqrt(2) to +sqrt(2).  If it's < 0, the surface
      // is pointing away from us, so we won't bother trying to plot it.
      if (L > 0) {
        // test against the z-buffer.  larger 1/z means the pixel is
        // closer to the viewer than what's already plotted.
        if(ooz > zbuffer[xp,yp]) {
          zbuffer[xp, yp] = ooz;
          int luminance_index = L*8;
          // luminance_index is now in the range 0..11 (8*sqrt(2) = 11.3)
          // now we lookup the character corresponding to the
          // luminance and plot it in our output:
          output[xp, yp] = ".,-~:;=!*#$@"[luminance_index];
        }
      }
    }
  }

  // now, dump output[] to the screen.
  // bring cursor to "home" location, in just about any currently-used
  // terminal emulation mode
  printf("\x1b[H");
  for (int j = 0; j < screen_height; j++) {
    for (int i = 0; i < screen_width; i++) {
      putchar(output[i,j]);
    }
    putchar('\n');
  }
  
}             




https://www.youtube.com/watch?v=pgAHW8OpcTY
Writing Qlock

                         eval(T=%(eval(%(E=27.chr;Z=32.chr;$
                    ><<E+"[2J";K=->q{(q-q*(1-3844.0/q.abs2)**0.5)
                /2};I=->f,a,b,z,t=p{(a-b).abs>(f<1?1:1-(K[a]-c=K[b]).
             abs)?I[f,c=                                     (a+b)/2,b,I
           [f,a,c,z,t],t  :''''''''''''''''''''''''''''''':  ]:f<1?(x,y=b.
         rect;d="'."[y%2  :                               :  ];c=z[y/2+5];c[
       x+=58]=t||(c[x]==  :                               :  d||Z==c[x]?d:?:))
     :(puts(E+"[H"+$/+I[  :                               :  0,c,0,I[0,b,c,z.map
    (&:b)]]*$/);t||I[0,b  :         Writing Qlock         :  ,c,z,Z];sleep(0.01))
    ;z};s=(Z*25+"eval(T=  :                               :  %("+T+"))").lines.ma
   p{|l|l.chomp.ljust(90  :     (C) Yusuke Endoh 2016     :  )};loop{z=0i-31,[-1.0
   ,Z];h=10i-30;a="5?GUV  :                               :  XIIPCM.AAN&,HY/ZZZO7[
   &,HY3'CE<5SM5.OOJ+BBT  :                               :  3LV+A&YQ.STT[MF.KUVXP
   K+&[AOOJ'&5?GU57-B5SI  :                               :  51>E<5PCMF.K,DXPD+SM7
   .77'";i=92;"Q+3_.DW'`  :          inspired by          :  HAD,A11R`NK+HILJ/D'&F
    1.CG371|BE@355?5A7@@  :                               :  ??7|3-5-".scan(/../)
    {a.gsub!("%c"%i-=1,$  :    https://t.co/NSBi45Lj77    :  &)};Time.now.strftim
     e("%H:%M").bytes{|c  :                               :  |q=h;a.split(?&)[c-
       48].scan(/([0-8])  :                               :  |./){$1?q+=(n=$1.
         hex)%3-1+(n/3-1  :                               :  )*2i:z<<[q,$&]}
           ;h+=6};z<<a=3  :...............................:  1i-31;31.time
             s{|y|s[y/2+                                     5][58]=Z};g
                =z.map{|b,h|x,y=a.rect;g&&s[y/2+5][x+58]=g;I[1,a,b,s,
                    g];a,g=b,h};sleep(61-Time.now.sec);;;}).gsub(
                         /^(.{26}):.{32}/){$1}.split*"")##))
                         
                         