type range(x) =
{
    type iterator = forward.iterator(x);
    type sentinel = {…}

    function begin → iterator = {…}
    function end   → sentinel = {…}
}

type random.access.range(x) : range(x) =
{
    type iterator = random.access.iterator;
    type sentinel = {…}

    function from (iterator i) → same = …
    function upto (iterator i) → same = …
    operator [iterator i, iterator j] = from(i).upto(j+1);
    operator [iterator i, iterator j) = from(i).upto(j);

    function from (integer n) = from(begin+n);
    function upto (integer n) = upto(begin+n);
    operator [integer b, integer e] = from(b).upto(e-b+1);
    operator [integer b, integer e) = from(b).upto(e-b);

    operator [integer i] = (begin+i)::value;
    operator (integer i) = (begin+i)::value;
}

type contiguous.range(x) : random.access.range(x) =
{
    type iterator = contiguous.iterator; iterator begin;
    type sentinel = contiguous.iterator; iterator end;

    function size = end - begin;
    function clip (iterator i) = min(max(begin,i),end);
    function from (iterator i) = same(clip(i), end);
    function upto (iterator i) = same(begin, clip(i));
}

integer.range : random.access.range(integer) = ;; immutable

    iterator = integer.iterator; iterator begin;
    sentinel = integer.iterator; iterator end

    function size = end - begin;
    function clip (iterator i) = min(max(begin,i),end)
    function from (iterator i) = same(clip(i), end)
    function upto (iterator i) = same(begin, clip(i))

;; type type extension =
;; {
;;     operator … = range(same);
;;     operator [] = random.access.range(same);
;;     operator [same a, same b) = random.access.range(same)[a, b);
;;     operator [same a, same b] = random.access.range(same)[a, b];
;;     operator [integer a, integer b) = random.access.range(same)[a, b);
;;     operator [integer a, integer b] = random.access.range(same)[a, b];
;; }
;;
;; operator (x) … = range(x);
;; operator (x) [] = random.access.range(x);

type integer extension =
{
    operator [integer a, integer b) = integer.range[a, b);
    operator [integer a, integer b] = integer.range[a, b];
}

statement for each (x) in (type… r) do (f(x)) =

    i := r::begin
    while i ≠ r::end do
        using x = i::value
            f(x)


;; f, r - expressions, x - name
operator (f(x)) for each (x) in (r) =

    i := r::begin;
    while i ≠ r::end do
        using x = i::value
            yield f(x)


operator (f) while (x) = while x yield f
operator (f) until (x) = yield f; while x yield f







