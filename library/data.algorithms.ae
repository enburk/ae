using "data.ranges";

;; using "math";
;; using math::min;
;; using math::max;
;; using math::abs;

type predicate (args...)     = function (args...) → boolean;
type binary.predicate (x, y) = function (x, y) → boolean;
type unary.predicate (x)     = function (x) → boolean;

mutation swap (a, b) = { c := a; a ← b; b ← c }

type range(x) extension =
{
    mutation remove.if (match: unary.predicate(x)) =
    {
        i := begin;
        j := begin;
        while j ≠ end do {
            swap(i.value, j.value);
            if not match(i.value) then i++;
            j++;
        }
        return i;
    }
}

type bidirectional.range(x) extension =
{
    mutation bubble.sort (in.order: binary.predicate = ≤) =
    {
        b := begin;
        e := end;
        while b ≠ e do {
            i := b;
            j := b; j++;
            while j ≠ e do {
                if not in.order(i::value, j::value)
                      then swap(i::value, j::value);
                i++;
                j++;
            }
            e--;
        }
    }
}

type random.access.range(x) extension =
{
    mutation rotate.by.reverse (middle: iterator) =
    {
        b := begin;
        m := middle;
        e := end;
        
        reverse(b, m);
        reverse(m, e);
        reverse(b, e);

        m = b + (e - m);

        return m;
    }

    mutation stable.partition (match: unary.predicate(x)) → iterator =
    {
        if size = 0 then return begin;
        if size = 1 then return begin + integer(match(begin.value));

        b := begin;
        m := b + size/2;
        e := end;

        return random.access.range
        (
            this[b, m)::stable.partition(match),
            this[m, e)::stable.partition(match)
        )
        ::rotate(m);
    }

    mutation gather (place: iterator, match: unary.predicate(x)) =
    {
        return random.access.range
        (
            this[begin, place)::stable_partition(negate(match)),
            this[place,   end)::stable_partition(match)
        )
    }
}









