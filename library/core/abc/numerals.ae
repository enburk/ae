type: complex;
type: real;
type: rational;
type: integer;
type: natural;

let: int = integer;

let: N = natural;
let: Z = integer;
let: Q = rational;
let: R = real;
let: C = complex;

precedence:
    ^,
    × / div mod,
    + -,
    <>;

;; −2^2 = (-2)^2 = 4
;; a^b^c = (a^b)^c

operator: (N) + (N) → N;
operator: (N) × (N) → N;

operator: (N) div (N) → N;
operator: (N) mod (N) → N;

operator: (Z) + (Z) → Z;
operator: (Z) - (Z) → Z;
operator: (Z) × (Z) → Z;

operator: (Z) div (Z) → Z;
operator: (Z) mod (Z) → Z;

operator: (R) + (R) → R;
operator: (R) - (R) → R;
operator: (R) × (R) → R;
operator: (R) / (R) → R;

coercion: (N) → Z;
coercion: (Z) → R;

function: abs (Z) → N;
function: abs (R) → R;

type: real extension:
{
    property: round → int;
    property: floor → int;
    property: ceil  → int;
}

operator: +(N) → N;
operator: +(Z) → Z;
operator: +(R) → R;

operator: -(N) → Z;
operator: -(Z) → Z;
operator: -(R) → R;

operator: (N) = (N) → boolean;
operator: (Z) = (Z) → boolean;
operator: (R) = (R) → boolean;

operator: (N) < (N) → boolean;
operator: (Z) < (Z) → boolean;
operator: (R) < (R) → boolean;



operator: +(N) → N;
operator: +(Z) → Z;
operator: +(Q) → Q;
operator: +(R) → R;
operator: +(C) → C;

operator: -(N) → Z;
operator: -(Z) → Z;
operator: -(Q) → Q;
operator: -(R) → R;
operator: -(C) → C;

operator: (N) + (N) → N;
operator: (N) - (N) → Z;
operator: (N) × (N) → N;
operator: (N) / (N) → Q;

operator: (Z) + (Z) → Z;
operator: (Z) - (Z) → Z;
operator: (Z) × (Z) → Z;
operator: (Z) / (Z) → Q;

operator: (Q) + (Q) → Q;
operator: (Q) - (Q) → Q;
operator: (Q) × (Q) → Q;
operator: (Q) / (Q) → Q;

operator: (R) + (R) → R;
operator: (R) - (R) → R;
operator: (R) × (R) → R;
operator: (R) / (R) → R;

operator: (C) + (C) → C;
operator: (C) - (C) → C;
operator: (C) × (C) → C;
operator: (C) / (C) → C;

operator: (N) ^ (N) → N;
operator: (N) ^ (Z) → Q;
operator: (N) ^ (Q) → R;
operator: (N) ^ (R) → R;
operator: (N) ^ (C) → C;

operator: (Z) ^ (N) → Z;
operator: (Z) ^ (Z) → Q;
operator: (Z) ^ (Q) → C;
operator: (Z) ^ (R) → C;
operator: (Z) ^ (C) → C;

operator: (Q) ^ (N) → Q;
operator: (Q) ^ (Z) → Q;
operator: (Q) ^ (Q) → C;
operator: (Q) ^ (R) → C;
operator: (Q) ^ (C) → C;

operator: (R) ^ (N) → R;
operator: (R) ^ (Z) → R;
operator: (R) ^ (Q) → C;
operator: (R) ^ (R) → C;
operator: (R) ^ (C) → C;

operator: (C) ^ (N) → C;
operator: (C) ^ (Z) → C;
operator: (C) ^ (Q) → C;
operator: (C) ^ (R) → C;
;;        (C) ^ (C) → ?;



operator: (x) += (y) { x ← x + y }
operator: (x) -= (y) { x ← x - y }
operator: (x) ×= (y) { x ← x × y }
operator: (x) /= (y) { x ← x / y }











