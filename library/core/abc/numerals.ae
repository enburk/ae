import: auxiliary;

type: complex;
type: real;
type: rational;
type: integer;
type: natural extends: integer { invariant: .self ≥ 0 }

let: int = integer;

let: N = natural;
let: Z = integer;
let: Q = rational;
let: R = real;
let: C = complex;

precedence:
    ^,
    × / div mod,
    + -,
    <>;

operator: (Z) + (Z) → Z;
operator: (Z) - (Z) → Z;
operator: (Z) × (Z) → Z;

operator: (Z) div (Z) → Z;
operator: (Z) mod (Z) → Z;

operator: (R) + (R) → R;
operator: (R) - (R) → R;
operator: (R) × (R) → R;
operator: (R) / (R) → R;

coercion: (Z) → R;

type: real extension:
{
    property: round → int;
    property: floor → int;
    property: ceil  → int;
}

operator: +(N x) = x;
operator: +(Z x) = x;
operator: +(Q x) = x;
operator: +(R x) = x;
operator: +(C x) = x;

operator: -(Z) → Z;
operator: -(R) → R;

operator: (Z) = (Z) → boolean;
operator: (R) = (R) → boolean;

operator: (Z) < (Z) → boolean;
operator: (R) < (R) → boolean;

operator: (x) += (y) { x ← x + y }
operator: (x) -= (y) { x ← x - y }
operator: (x) ×= (y) { x ← x × y }
operator: (x) /= (y) { x ← x / y }

function: abs (x) = x < 0 ? -x | x;

function: gcd (a, b)
{
    while: b ≠ 0 do:
    a, b ← b, a mod b;
    return: a;
}
function: lcm (a, b) =

    a = 0 or b = 0 ? 0 |
    abs(a) × (abs(b)
    div gcd(a,b));

function: gcd (x, xs…) = gcd(x, gcd(xs…));
function: lcm (x, xs…) = lcm(x, lcm(xs…));










