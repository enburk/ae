type: boolean = false | true; ;; ordered!

let: false = boolean::false;
let: true  = boolean::true;

type: predicate (args…) = function: (args…) → boolean;

;; 'precede' = have higher precedence than
;; - binary operators 'precede' ternary operators
;; - unary operators 'precede' binary operators
;; - postfix operators 'precede' prefix operators
;; - postfix operators are left associative
;; - prefix operators are right associative
;; - infix operators are left associative by default
;; - infix operators may have precedence

precedence:
    <>,
    < ≤ ≥ >,
    = ≠,
    and,
    xor,
    or;

operator: (boolean if) ? (x then) | (x else) → x; ;; lazy

operator: not (boolean x) = x = false;
operator: (boolean x) or  (boolean y) = x ? true | y;
operator: (boolean x) and (boolean y) = x ? y | false;
operator: (boolean x) xor (boolean y) = x and not y or y and not x;

;; non-associative ?
operator: (x a) = (x b); ;; element-wise by default
operator: (x a) < (x b); ;; lexicographical by default
operator: (x a) ≠ (x b) = not (a = b);
operator: (x a) > (x b) = not (a ≤ b);
operator: (x a) ≤ (x b) = a < b or a = b;
operator: (x a) ≥ (x b) = a > b or a = b;

operator: (x a) < (x b) < (x c) = a < b and b < c;
operator: (x a) < (x b) ≤ (x c) = a < b and b ≤ c;
operator: (x a) ≤ (x b) < (x c) = a ≤ b and b < c;
operator: (x a) ≤ (x b) ≤ (x c) = a ≤ b and b ≤ c;

operator: (x a) > (x b) > (x c) = a > b and b > c;
operator: (x a) > (x b) ≥ (x c) = a > b and b ≥ c;
operator: (x a) ≥ (x b) > (x c) = a ≥ b and b > c;
operator: (x a) ≥ (x b) ≥ (x c) = a ≥ b and b ≥ c;

operator: (boolean a) = (boolean b) ;; element-wise by default
{
}
operator: (boolean a) < (boolean b) ;; lexicographical by default
{
}
