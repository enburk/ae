import: ::numerals;
import: ::auxiliary;

operator: +(N) → N = .self;
operator: +(Z) → Z = .self;
operator: +(Q) → Q = .self;
operator: +(R) → R = .self;
operator: +(C) → C = .self;

function: gcd (a, b)
{
    while: b ≠ 0 do:
    a, b ← b, a mod b;
    return: a;
}
function: lcm (a, b) =

    a = 0 or b = 0 ? 0 |
    abs(a) × (abs(b)
    div gcd(a,b));

function: gcd (x, xs…) = gcd(x, gcd(xs…));
function: lcm (x, xs…) = lcm(x, lcm(xs…));
