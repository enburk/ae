nothing {}
;; - also known as "unit type"
;; - singleton (type and value)
;; - all other types implicitly extends it
;; - functions without return implicitly return nothing
;; - nothing ≠ any: nothing also can be constructed from any type
;;   but only by slicing (to nothing)

type: void;
;; - also known as "bottom type"
;; - no value can be instantiated
;; - subclass of all other types

function: absurd (void) → x;
;; since void values logically don't exist,
;; this witnesses the logical reasoning tool
;; of "ex falso quodlibet"
;; (Haskell)

function: error (message) → void { throw: message }
;; can be used in ternary "elvis" operator:
;; x = ok? value.of.some.type | error("oops");
;; because void can be coerced to any type
;; (but error will never return a value)

type: x extension: ;; meta
{
    property: .self → x;
    property: .self ← x;
    property: .same → type: x;
}

;; binary operators precede ternary operators
;; unary operators precede binary operators
;; postfix operators precede prefix operators
;; postfix operators are left associative
;; prefix operators are right associative
;; infix operators are left associative by default
;; infix operators have precedence

