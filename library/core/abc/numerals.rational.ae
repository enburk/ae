import: ::numerals;

type: rational
{
    int a := 0; let: numerator   = a;
    int b := 1; let: denominator = b;

    invariant: b ≠ 0;

    operator: = (.same x) = a × x.b = b × x.a;
    operator: < (.same x) =
        b > 0 and x.b > 0 or
        b < 0 and x.b < 0 ?
        a × x.b < b × x.a |
        a × x.b > b × x.a;

    operator: + (.same x) = .same(a × x.b + b × x.a, b × x.b);
    operator: - (.same x) = .same(a × x.b - b × x.a, b × x.b);
    operator: × (.same x) = .same(a × x.a,  b × x.b);
    operator: / (.same x) = .same(a × x.b,  b × x.a);

    operator: ^ (int n) = n < 0 ?
        .same(b^n, a^n) |
        .same(a^n, b^n);

    function: canonicalize
    {
        x := gcd(a, b);
        a ← a div x;
        b ← b div x;
        if: b < 0 then:
        a ← -a,
        b ← -b;
    }
    property: canonical → rational
    {
        x := .self;
        x.canonicalize();
        return: x;
    }
}

operator: - (rational x) = rational(-x.a, x.b);

coercion: (rational x) → real = real(x.a) / real(x.b);

coercion: (int x) → rational = rational(x, 1);
