import: ::ranges;

property: word.length → natural;

function: size (type: x) → natural;

type: address subset.of: natural;

type: pointer (type: x) implements: reference(x)
{
    address address;
    property: value → x = value.of(x)::at(address);
    property: value ← x = value.of(x)::at(address) ← value;
}
type: iterator (type: x) extends: pointer implements: random.access.iterator(x)
{
    operator: < (same: i) = (address < i.address);
    operator: - (same: i) = (address - i.address) / size.of(x);
    operator: + (int n) = address + n × size.of(x);
    operator: - (int n) = address - n × size.of(x);
}
type: range (type: x) implements: random.access.range(x) =
{
    let: iterator = contiguous.iterator;
    let: sentinel = contiguous.iterator;

    iterator b; property: begin = b;
    sentinel e; property: end   = e;

    function: size = e - b;
    function: clip (iterator i) = min(max(b,i),e);
    function: from (iterator i) = same(clip(i),e);
    function: upto (iterator i) = same(b,clip(i));
}

type: chunk extends: range(byte)
{
    constructor: (int n) { b = acquire(n); e = b + n; }
    destructor: { release(b) }
}
